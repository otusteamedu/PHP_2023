# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  balancer:
    build:
      context: ./nginx
      dockerfile: DockerfileBalancer
    image: myapp/balancer
    container_name: balancer
    # проброс портов
    ports:
      - "80:80"
    volumes:
       - ./code:/data/application.local
    networks:
      - app-network

  #контейнер с Nginx
  nginx1:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx1
    container_name: webserver1
    volumes:
      - ./code:/data/application.local
    networks:
      - app-network

  #контейнер с Nginx
  nginx2:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx2
    container_name: webserver2
    volumes:
      - ./code:/data/application.local
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app1:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php1 # имя будущего образа
    container_name: app1 # имя контейнера после запуска
    volumes:
       - ./code:/data/application.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app2:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php2 # имя будущего образа
    container_name: app2 # имя контейнера после запуска
    volumes:
      - ./code:/data/application.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  #Контейнер с Memcached
  memcached:
    build:
      context: ./memcached
      dockerfile: Dockerfile
    image: memcached # имя будущего образа
    container_name: memcached # имя контейнера после запуска
    volumes:
      - ./memcached/data:/root/memcached
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge