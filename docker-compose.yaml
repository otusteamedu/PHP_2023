# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: myapp/nginx
    container_name: '${COMPOSE_PROJECT_NAME}_nginx'
    # проброс портов
    ports:
      - "80:80"
    volumes:
       - ./src:/data/mysite.local
       - ./nginx/hosts/mysite.local.conf:/etc/nginx/conf.d/mysite.local.conf
       - socket:/var/run/
    networks:
      - app-network

  #Контейнер с PHP-FPM
  fpm:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: myapp/php # имя будущего образа
    container_name: '${COMPOSE_PROJECT_NAME}_fpm' # имя контейнера после запуска
    volumes:
       - ./src:/data/mysite.local
       - ./fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
       - socket:/var/run/
    env_file:
      - .env
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  postgres:
    build:
      context: ./postrgres
      dockerfile: Dockerfile
    image: postgres
    container_name: '${COMPOSE_PROJECT_NAME}_postgres'
    restart: always
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./DDL.sql:/DDL.sql
      - ./DML.sql:/DML.sql
      - ${LOG_DIR}:/var/log
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - app-network

volumes:
  socket:
  postgres:
    driver: local

#Docker Networks
networks:
  app-network:
    driver: bridge