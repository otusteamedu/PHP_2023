#№2 Подсчёт проданных билетов за неделю
SELECT COUNT(*) FROM sessions
RIGHT JOIN tickets ON sessions.id = tickets.movie_session_id
WHERE date >= now() - interval '7 days' AND sold;
 count
-------
   123
(1 row)

 QUERY PLAN
------------------------------------------------------------------------------------------------
 Aggregate  (cost=21.90..21.91 rows=1 width=8)
   ->  Nested Loop  (cost=0.16..21.61 rows=115 width=0)
         ->  Seq Scan on tickets  (cost=0.00..11.75 rows=344 width=4)
               Filter: sold
         ->  Memoize  (cost=0.16..0.33 rows=1 width=4)
               Cache Key: tickets.movie_session_id
               Cache Mode: logical
               ->  Index Scan using sessions_pkey on sessions  (cost=0.15..0.32 rows=1 width=4)
                     Index Cond: (id = tickets.movie_session_id)
                     Filter: (date >= (now() - '7 days'::interval))
(10 rows)

QUERY PLAN 10 000
------------------------------------------------------------------------------------------------
 Aggregate  (cost=324.33..324.34 rows=1 width=8)
   ->  Nested Loop  (cost=0.30..310.90 rows=5369 width=0)
         ->  Seq Scan on tickets  (cost=0.00..174.75 rows=5371 width=4)
               Filter: sold
         ->  Memoize  (cost=0.30..0.39 rows=1 width=4)
               Cache Key: tickets.movie_session_id
               Cache Mode: logical
               ->  Index Scan using sessions_pkey on sessions  (cost=0.29..0.38 rows=1 width=4)
                     Index Cond: (id = tickets.movie_session_id)
                     Filter: (date >= (now() - '7 days'::interval))
(10 rows)

QUERY PLAN 10 000 000
------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=170003.43..170003.44 rows=1 width=8)
   ->  Gather  (cost=170003.22..170003.43 rows=2 width=8)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=169003.22..169003.23 rows=1 width=8)
               ->  Nested Loop  (cost=0.45..163806.58 rows=2078656 width=0)
                     ->  Parallel Seq Scan on tickets  (cost=0.00..111838.58 rows=2078656 width=4)
                           Filter: sold
                     ->  Memoize  (cost=0.45..0.54 rows=1 width=4)
                           Cache Key: tickets.movie_session_id
                           Cache Mode: logical
                           ->  Index Scan using sessions_pkey on sessions  (cost=0.43..0.53 rows=1 width=4)
                                 Index Cond: (id = tickets.movie_session_id)
                                 Filter: (date >= (now() - '7 days'::interval))
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(16 rows)

Планировщик не использует индекс date
Вывод по индексам:
индексы целесообразно задавать на поля, которые участвуют в фильтрации (WHERE) или в джойнах (foreign key). Индексы
бесполезны, если значаения в столбце не сильно разнообразны (булевы значения) или когда одно значение приходится где-то
на 75% строк. В таком случае плапнировщик выбирает последовательный перебор вместо поиска по индексу.