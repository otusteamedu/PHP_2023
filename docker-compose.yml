version: "3.8"

services:

  application:
    build:
      dockerfile: .docker/php/Dockerfile
      context: ./
      target: app_php
      args:
        UNAME: ${UNAME}
        UGROUP: ${UGROUP}
        UID: ${APP_UID}
        GID: ${APP_GID}
    tty: true
    environment:
      ELASTIC_HOST: ${ELASTIC_HOST:?provide elastic host to .env}
      ELASTIC_PORT: ${ELASTIC_PORT:?provide elastic name to .env}
      ELASTIC_USER: ${ELASTIC_USER:?provide elastic user to .env}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:?Provide elastic password to .env}
      ELASTIC_CERT: ${ELASTIC_CERT:?Provide elastic cert to .env}
      ELASTIC_INDEX: ${ELASTIC_INDEX:?Provide elastic index to .env}
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy

  # The 'tls' service runs a one-off script which initializes TLS certificates and
  # private keys for all components of the stack inside the local tls/ directory.
  #
  # This task only needs to be performed once, *before* the first stack startup.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up tls'.
  tls:
    container_name: bookshop-elastic-tls
    profiles:
      - setup
    build:
      context: .docker/elk/tls/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    user: root  # ensures we can write to the local tls/ directory.
    init: true
    volumes:
      - ./.docker/elk/tls/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./.docker/elk/tls/instances.yml:/usr/share/elasticsearch/tls/instances.yml:ro,Z
      - ./.docker/elk/tls/certs:/usr/share/elasticsearch/tls/certs:z

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    container_name: bookshop-elastic-setup
    profiles:
      - setup
    build:
      context: .docker/elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./.docker/elk/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./.docker/elk/setup/lib.sh:/lib.sh:ro,Z
      - ./.docker/elk/setup/roles:/roles:ro,Z
      # (!) CA certificate. Generate using the 'tls' service.
      - ./.docker/elk/tls/certs/ca/ca.crt:/ca.crt:ro,z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: bookshop-elastic
    build:
      context: .docker/elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./.docker/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
      # (!) TLS certificates. Generate using the 'tls' service.
      - ./.docker/elk/tls/certs/ca/ca.crt:/usr/share/elasticsearch/config/ca.crt:ro,z
      - ./.docker/elk/tls/certs/elasticsearch/elasticsearch.crt:/usr/share/elasticsearch/config/elasticsearch.crt:ro,z
      - ./.docker/elk/tls/certs/elasticsearch/elasticsearch.key:/usr/share/elasticsearch/config/elasticsearch.key:ro,z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
    healthcheck:
      test: "curl --fail --cacert /usr/share/elasticsearch/config/elasticsearch.crt https://localhost:9200 -u elastic:${ELASTIC_PASSWORD} || exit 1"
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped

  kibana:
    container_name: bookshop-kibana
    build:
      context: .docker/elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./.docker/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      # (!) TLS certificates. Generate using the 'tls' service.
      - ./.docker/elk/tls/certs/ca/ca.crt:/usr/share/kibana/config/ca.crt:ro,z
      - ./.docker/elk/tls/certs/kibana/kibana.crt:/usr/share/kibana/config/kibana.crt:ro,Z
      - ./.docker/elk/tls/certs/kibana/kibana.key:/usr/share/kibana/config/kibana.key:ro,Z
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: "curl --fail http://localhost:5601 || exit 1"
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
