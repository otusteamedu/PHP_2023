1. ANALYSE movies;
   EXPLAIN SELECT m.name
   FROM movies m
   INNER JOIN schedules s on m.id = s.movie_id
   WHERE s.datetime >= date_trunc('day', now() at time zone 'Europe/Moscow')
       AND s.datetime <= now();

Nested Loop  (cost=0.29..3244.31 rows=1 width=26)
  ->  Seq Scan on schedules s  (cost=0.00..3236.00 rows=1 width=8)
"        Filter: ((datetime <= now()) AND (datetime >= date_trunc('day'::text, (now() AT TIME ZONE 'Europe/Moscow'::text))))"
  ->  Index Scan using movies_pkey on movies m  (cost=0.29..8.31 rows=1 width=34)
        Index Cond: (id = s.movie_id)

// ===============================

2. ANALYSE tickets;
   EXPLAIN SELECT count(created_at)
   FROM tickets
   WHERE created_at >= 1681948800 AND created_at <= 1682553600;

Finalize Aggregate  (cost=146837.14..146837.15 rows=1 width=8)
  ->  Gather  (cost=146836.92..146837.14 rows=2 width=8)
        Workers Planned: 2
        ->  Partial Aggregate  (cost=145836.92..145836.93 rows=1 width=8)
              ->  Parallel Seq Scan on tickets  (cost=0.00..145833.11 rows=1525 width=4)
                    Filter: ((created_at >= 1681948800) AND (created_at <= 1682553600))
JIT:
  Functions: 7
"  Options: Inlining false, Optimization false, Expressions true, Deforming true"

// ===============================

3. ANALYSE movies;
   EXPLAIN SELECT movies.*, string_agg(g.name, ',') as genger
   FROM movies
   INNER JOIN schedules s on movies.id = s.movie_id
   LEFT JOIN movie_genres mg on movies.id = mg.movie_id
   LEFT JOIN genres g on g.id = mg.genre_id
   WHERE s.datetime >= date_trunc('day', now() at time zone 'Europe/Moscow')
     AND s.datetime <= now()
   GROUP BY movies.id;

GroupAggregate  (cost=3244.83..3244.85 rows=1 width=374)
  Group Key: movies.id
  ->  Sort  (cost=3244.83..3244.83 rows=1 width=374)
        Sort Key: movies.id
        ->  Nested Loop Left Join  (cost=0.74..3244.82 rows=1 width=374)
              ->  Nested Loop Left Join  (cost=0.58..3244.65 rows=1 width=350)
                    ->  Nested Loop  (cost=0.29..3244.31 rows=1 width=342)
                          ->  Seq Scan on schedules s  (cost=0.00..3236.00 rows=1 width=8)
"                                Filter: ((datetime <= now()) AND (datetime >= date_trunc('day'::text, (now() AT TIME ZONE 'Europe/Moscow'::text))))"
                          ->  Index Scan using movies_pkey on movies  (cost=0.29..8.31 rows=1 width=342)
                                Index Cond: (id = s.movie_id)
                    ->  Index Only Scan using movie_genres_pkey on movie_genres mg  (cost=0.29..0.33 rows=1 width=16)
                          Index Cond: (movie_id = movies.id)
              ->  Index Scan using genres_pkey on genres g  (cost=0.15..0.17 rows=1 width=40)
                    Index Cond: (id = mg.genre_id)

// ===============================

4. ANALYSE tickets;
   EXPLAIN SELECT m.id, m.name, sum(amount) as amount
   FROM tickets
   INNER JOIN movies m on m.id = tickets.movie_id
   WHERE datetime >= 1681948800 AND datetime <= 1682553600
   GROUP BY m.id, m.name
   ORDER BY amount DESC
   LIMIT 3;

Limit  (cost=153163.90..153163.91 rows=3 width=66)
  ->  Sort  (cost=153163.90..153173.95 rows=4019 width=66)
        Sort Key: (sum(tickets.amount)) DESC
        ->  Finalize GroupAggregate  (cost=152616.42..153111.96 rows=4019 width=66)
              Group Key: m.id
              ->  Gather Merge  (cost=152616.42..153036.60 rows=3350 width=66)
                    Workers Planned: 2
                    ->  Partial GroupAggregate  (cost=151616.40..151649.90 rows=1675 width=66)
                          Group Key: m.id
                          ->  Sort  (cost=151616.40..151620.59 rows=1675 width=39)
                                Sort Key: m.id
                                ->  Nested Loop  (cost=0.29..151526.70 rows=1675 width=39)
                                      ->  Parallel Seq Scan on tickets  (cost=0.00..145834.50 rows=1675 width=13)
                                            Filter: ((datetime >= 1681948800) AND (datetime <= 1682553600))
                                      ->  Index Scan using movies_pkey on movies m  (cost=0.29..3.40 rows=1 width=34)
                                            Index Cond: (id = tickets.movie_id)
JIT:
  Functions: 16
"  Options: Inlining false, Optimization false, Expressions true, Deforming true"

// ===============================

5. ANALYSE places;
   EXPLAIN SELECT places.*, case when t.id IS NOT NULL then true else false end as booked
   FROM places
   INNER JOIN schedules s on places.cinema_hall_id = s.cinema_hall_id
   LEFT JOIN tickets t on places.id = t.place_id and s.movie_id = t.movie_id
   WHERE s.id = 9;

Hash Right Join  (cost=26.12..258361.85 rows=200 width=33)
  Hash Cond: ((t.movie_id = s.movie_id) AND (t.place_id = places.id))
  ->  Seq Scan on tickets t  (cost=0.00..183334.80 rows=10000080 width=24)
  ->  Hash  (cost=23.12..23.12 rows=200 width=40)
        ->  Hash Join  (cost=8.32..23.12 rows=200 width=40)
              Hash Cond: (places.cinema_hall_id = s.cinema_hall_id)
              ->  Seq Scan on places  (cost=0.00..11.00 rows=600 width=32)
              ->  Hash  (cost=8.31..8.31 rows=1 width=16)
                    ->  Index Scan using schedules_pkey on schedules s  (cost=0.29..8.31 rows=1 width=16)
                          Index Cond: (id = 9)
JIT:
  Functions: 25
"  Options: Inlining false, Optimization false, Expressions true, Deforming true"

// ===============================

6. ANALYSE schedule_prices;
   EXPLAIN SELECT min(sp.price) as min_price, max(sp.price) as max_price
   FROM schedule_prices sp
   WHERE sp.schedule_id = 9;

Aggregate  (cost=11.91..11.92 rows=1 width=64)
  ->  Index Scan using schedule_prices_pkey on schedule_prices sp  (cost=0.42..11.90 rows=2 width=5)
        Index Cond: (schedule_id = 9)
