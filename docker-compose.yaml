# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:

  #контейнер с Nginx
  nginx-balancer:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: my-otus-app/nginx
    container_name: my-otus-webserver-balsncer
    # проброс портов
    ports:
      - 80:80
    depends_on:
      - nginx
      - nginx2
    volumes:
      - ./nginx/hosts/mysite.local.balancer.conf:/etc/nginx/conf.d/mysite.local.conf
    networks:
      - otus-app-network


  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: my-otus-app/nginx
    container_name: my-otus-webserver-1
    # проброс портов
    ports:
      - 81:80
    volumes:
       - ./code:/data/mysite.local
       - ./nginx/hosts/mysite.local.conf:/etc/nginx/conf.d/mysite.local.conf
       - phpsocket:/var/run
    networks:
      - otus-app-network

  nginx2:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: my-otus-app/nginx
    container_name: my-otus-webserver-2
    # проброс портов
    ports:
      - 82:80
    volumes:
      - ./code:/data/mysite.local
      - ./nginx/hosts/mysite.local.conf:/etc/nginx/conf.d/mysite.local.conf
      - phpsocket:/var/run
    networks:
      - otus-app-network

  #Контейнер с PHP-FPM, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: my-otus-app/php # имя будущего образа
    container_name: my-otus-app # имя контейнера после запуска
    volumes:
       - .:/data
       - ./code:/data/mysite.local
       - ./fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
       - phpsocket:/var/run
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - otus-app-network

  #Контейнер с PHP-FPM, назовём его app
  app-2:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: my-otus-app/php # имя будущего образа
    container_name: my-otus-app-2 # имя контейнера после запуска
    volumes:
      - .:/data
      - ./code:/data/mysite.local
      - ./fpm/zz-docker2.conf:/usr/local/etc/php-fpm.d/zz-docker2.conf
      - phpsocket:/var/run
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - otus-app-network

  db:
    image: mysql:8.1.0
    container_name: my-otus-mysql
    environment:
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    ports:
      - '42339:3306'
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - otus-app-network
    command:
      - --sql_mode=NO_ENGINE_SUBSTITUTION
      - --table_open_cache=20000
      - --max_connections=1000
      - --performance_schema

#  redis:
#    image: redis:latest
#    command: [ "redis-server", "--appendonly", "yes" ]
#    container_name: my-otus-redis
#    ports:
#      - 6380:6379
#    networks:
#      - otus-app-network
#
  memcached:
    image: memcached:latest
    container_name: memcached-otus
    ports:
      - 11212:11211
    networks:
      - otus-app-network

#Docker Networks
networks:
  otus-app-network:
    driver: bridge

volumes:
  phpsocket:
  dbdata:
    driver: local