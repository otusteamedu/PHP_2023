1. ANALYSE movies;
   EXPLAIN SELECT m.name
   FROM movies m
   INNER JOIN schedules s on m.id = s.movie_id
   WHERE s.datetime >= date_trunc('day', now() at time zone 'Europe/Moscow')
       AND s.datetime <= now();

Nested Loop  (cost=0.59..16.63 rows=1 width=26)
  ->  Index Scan using schedules_datetime_index on schedules s  (cost=0.30..8.32 rows=1 width=8)
"        Index Cond: ((datetime >= date_trunc('day'::text, (now() AT TIME ZONE 'Europe/Moscow'::text))) AND (datetime <= now()))"
  ->  Index Scan using movies_pkey on movies m  (cost=0.29..8.31 rows=1 width=34)
        Index Cond: (id = s.movie_id)

// ===============================

2. ANALYSE tickets;
   EXPLAIN SELECT count(created_at)
   FROM tickets
   WHERE created_at >= 1681948800 AND created_at <= 1682553600;

Aggregate  (cost=116.15..116.16 rows=1 width=8)
  ->  Index Only Scan using tickets_created_at_index on tickets  (cost=0.43..107.74 rows=3365 width=4)
        Index Cond: ((created_at >= 1681948800) AND (created_at <= 1682553600))

// ===============================

3. ANALYSE movies;
   EXPLAIN SELECT movies.*, string_agg(g.name, ',') as genger
   FROM movies
   INNER JOIN schedules s on movies.id = s.movie_id
   LEFT JOIN movie_genres mg on movies.id = mg.movie_id
   LEFT JOIN genres g on g.id = mg.genre_id
   WHERE s.datetime >= date_trunc('day', now() at time zone 'Europe/Moscow')
     AND s.datetime <= now()
   GROUP BY movies.id;

GroupAggregate  (cost=17.15..17.17 rows=1 width=374)
  Group Key: movies.id
  ->  Sort  (cost=17.15..17.15 rows=1 width=374)
        Sort Key: movies.id
        ->  Nested Loop Left Join  (cost=1.04..17.14 rows=1 width=374)
              ->  Nested Loop Left Join  (cost=0.89..16.97 rows=1 width=350)
                    ->  Nested Loop  (cost=0.59..16.63 rows=1 width=342)
                          ->  Index Scan using schedules_datetime_index on schedules s  (cost=0.30..8.32 rows=1 width=8)
"                                Index Cond: ((datetime >= date_trunc('day'::text, (now() AT TIME ZONE 'Europe/Moscow'::text))) AND (datetime <= now()))"
                          ->  Index Scan using movies_pkey on movies  (cost=0.29..8.31 rows=1 width=342)
                                Index Cond: (id = s.movie_id)
                    ->  Index Only Scan using movie_genres_pkey on movie_genres mg  (cost=0.29..0.33 rows=1 width=16)
                          Index Cond: (movie_id = movies.id)
              ->  Index Scan using genres_pkey on genres g  (cost=0.15..0.17 rows=1 width=40)
                    Index Cond: (id = mg.genre_id)

// ===============================

4. ANALYSE tickets;
   EXPLAIN SELECT m.id, m.name, sum(amount) as amount
   FROM tickets
   INNER JOIN movies m on m.id = tickets.movie_id
   WHERE datetime >= 1681948800 AND datetime <= 1682553600
   GROUP BY m.id, m.name
   ORDER BY amount DESC
   LIMIT 3;

Limit  (cost=20275.73..20275.74 rows=3 width=66)
  ->  Sort  (cost=20275.73..20285.59 rows=3943 width=66)
        Sort Key: (sum(tickets.amount)) DESC
        ->  Finalize GroupAggregate  (cost=19738.69..20224.77 rows=3943 width=66)
              Group Key: m.id
              ->  Gather Merge  (cost=19738.69..20150.84 rows=3286 width=66)
                    Workers Planned: 2
                    ->  Partial GroupAggregate  (cost=18738.67..18771.53 rows=1643 width=66)
                          Group Key: m.id
                          ->  Sort  (cost=18738.67..18742.77 rows=1643 width=39)
                                Sort Key: m.id
                                ->  Nested Loop  (cost=85.14..18650.91 rows=1643 width=39)
                                      ->  Parallel Bitmap Heap Scan on tickets  (cost=84.85..13032.99 rows=1643 width=13)
                                            Recheck Cond: ((datetime >= 1681948800) AND (datetime <= 1682553600))
                                            ->  Bitmap Index Scan on tickets_datetime_index  (cost=0.00..83.87 rows=3943 width=0)
                                                  Index Cond: ((datetime >= 1681948800) AND (datetime <= 1682553600))
                                      ->  Index Scan using movies_pkey on movies m  (cost=0.29..3.42 rows=1 width=34)
                                            Index Cond: (id = tickets.movie_id)

// ===============================

5. ANALYSE places;
   EXPLAIN SELECT places.*, case when t.id IS NOT NULL then true else false end as booked
   FROM places
   INNER JOIN schedules s on places.cinema_hall_id = s.cinema_hall_id
   LEFT JOIN tickets t on places.id = t.place_id and s.movie_id = t.movie_id
   WHERE s.id = 9;

Nested Loop Left Join  (cost=0.89..1494.69 rows=200 width=33)
  Join Filter: (places.id = t.place_id)
  ->  Nested Loop  (cost=0.44..22.96 rows=200 width=40)
        ->  Index Scan using schedules_pkey on schedules s  (cost=0.29..8.31 rows=1 width=16)
              Index Cond: (id = 9)
        ->  Index Scan using places_cinema_hall_id_index on places  (cost=0.15..12.65 rows=200 width=32)
              Index Cond: (cinema_hall_id = s.cinema_hall_id)
  ->  Memoize  (cost=0.45..401.41 rows=223 width=24)
        Cache Key: s.movie_id
        Cache Mode: logical
        ->  Index Scan using tickets_movie_id_and_place_id_index on tickets t  (cost=0.43..401.40 rows=223 width=24)
              Index Cond: (movie_id = s.movie_id)

// ===============================

6. ANALYSE schedule_prices;
   EXPLAIN SELECT min(sp.price) as min_price, max(sp.price) as max_price
   FROM schedule_prices sp
   WHERE sp.schedule_id = 9;

Aggregate  (cost=11.91..11.92 rows=1 width=64)
  ->  Index Scan using schedule_prices_pkey on schedule_prices sp  (cost=0.42..11.90 rows=2 width=5)
        Index Cond: (schedule_id = 9)
