# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #контейнер с Nginx
  nginx:
    build:
      context: ./nginx
      args:
        UID: "3000"
      dockerfile: Dockerfile
    image: myapp/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
    volumes:
       - ./code:/data/mysite.local
       - ./docker/sock:/var/run/sock
    networks:
      - app-network

  #Контейнер с PHP-FPM, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      args:
        UID: "3000"
      dockerfile: Dockerfile
    image: myapp/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    volumes:
       - ./code:/data/mysite.local
       - ./docker/php/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
       - ./docker/sock:/var/run/sock
    depends_on:
      - db
      - redis
      - memcached
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  # Контейнер с MySQL
  db:
    image: mysql:5.7.22
    container_name: db
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./dbdata:/var/lib/mysql
    networks:
      - app-network

  # Контейнер с redis
  redis:
    image: redis:4.0
    container_name: redis
    ports:
      - '6379:6379'
    environment:
      ALLOW_EMPTY_PASSWORD: ${REDIS_ALLOW_EMPTY_PASSWORD}
    networks:
      - app-network

  # Контейнер с memcached
  memcached:
    container_name: memcached
    image: memcached:1.6.17
    ports:
      - "11211:11211"
    environment:
      MEMCACHED_HOST: ${MEMCACHED_HOST}
      MEMCACHED_PORT: ${MEMCACHED_PORT}
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge