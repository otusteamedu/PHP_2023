<?php
// Функция letterCombinations создает все возможные комбинации букв, соответствующих цифрам во входной строке.
// Использование вложенных циклов: Мы перебираем каждую цифру во входной строке и для каждой цифры перебираем все буквы, которые она может представлять.
// Рекурсивное создание комбинаций: Для каждой новой цифры мы добавляем к каждой существующей комбинации из предыдущих цифр каждую возможную букву.
// Сложность по времени: Мы делаем это для каждой цифры, просматривая все буквы, которые она может представлять. Это приводит к тому, что алгоритм работает дольше, когда входная строка длиннее.
// Сложность по памяти: Мы храним все комбинации в памяти, прежде чем вернуть их в виде массива. Чем больше комбинаций мы создаем, тем больше памяти мы используем.
// Пример использования: Для входной строки "23", мы создаем комбинации букв, соответствующих цифрам 2 и 3, и возвращаем их в виде массива.

class Solution {
    function letterCombinations($digits) {
        if (empty($digits)) {
            return [];
        }

        $mapping = [
            '2' => ['a', 'b', 'c'],
            '3' => ['d', 'e', 'f'],
            '4' => ['g', 'h', 'i'],
            '5' => ['j', 'k', 'l'],
            '6' => ['m', 'n', 'o'],
            '7' => ['p', 'q', 'r', 's'],
            '8' => ['t', 'u', 'v'],
            '9' => ['w', 'x', 'y', 'z']
        ];

        $combinations = [''];

        for ($i = 0; $i < strlen($digits); $i++) {
            $new_combinations = [];
            foreach ($combinations as $combination) {
                foreach ($mapping[$digits[$i]] as $letter) {
                    $new_combinations[] = $combination . $letter;
                }
            }
            $combinations = $new_combinations;
        }

        return $combinations;
    }
}

// Пример использования:
$solution = new Solution();
$digits = "23";
print_r($solution->letterCombinations($digits)); // Выведет ["ad","ae","af","bd","be","bf","cd","ce","cf"]
