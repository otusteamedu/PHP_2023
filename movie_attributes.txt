
CREATE TABLE "public.movie" (
	"id" serial NOT NULL,
	"title" varchar(255) NOT NULL,
	"duration" TIME NOT NULL,
	"description" TEXT NOT NULL,
	"age_limit_id" integer NOT NULL,
	CONSTRAINT "movie_pk" PRIMARY KEY ("id")
) WITH (
  OIDS=FALSE
);


CREATE TABLE "public.attribute_type" (
	"id" serial NOT NULL,
	"name" varchar(10) NOT NULL,
	CONSTRAINT "attribute_type" PRIMARY KEY ("id")
) WITH (
  OIDS=FALSE
);


CREATE TABLE "public.data_type" (
	"id" serial NOT NULL,
	"name" varchar(10) NOT NULL,
	CONSTRAINT "data_type" PRIMARY KEY ("id")
) WITH (
  OIDS=FALSE
);


CREATE TABLE "public.attribute" (
	"id" serial NOT NULL,
	"data_type_id" integer NOT NULL,
	"type_id" integer NOT NULL,
	"name" varchar(255) NOT NULL,
	CONSTRAINT "attribute_pk" PRIMARY KEY ("id")
) WITH (
  OIDS=FALSE
);
ALTER TABLE "public.attribute" ADD CONSTRAINT "attribute_fk0" FOREIGN KEY ("data_type_id") REFERENCES "public.data_type"("id");
ALTER TABLE "public.attribute" ADD CONSTRAINT "attribute_fk1" FOREIGN KEY ("type_id") REFERENCES "public.attribute_type"("id");


CREATE TABLE "public.movie_attribute" (
	"id" serial NOT NULL,
	"movie_id" integer NOT NULL,
	"attribute_id" integer NOT NULL,
	"attribute_value_text" text,
	"attribute_value_bool" boolean,
	"attribute_value_time" TIME WITH TIME ZONE,
	"attribute_value_datetime" TIMESTAMP WITH TIME ZONE,
	"attribute_value_int" integer,
	"attribute_value_num" NUMERIC(4, 2),
	CONSTRAINT "movie_attribute_pk" PRIMARY KEY ("id")
) WITH (
  OIDS=FALSE
);
ALTER TABLE "public.movie_attribute" ADD CONSTRAINT "movie_attribute_fk0" FOREIGN KEY ("movie_id") REFERENCES "public.movie"("id");
ALTER TABLE "public.movie_attribute" ADD CONSTRAINT "movie_attribute_fk1" FOREIGN KEY ("attribute_id") REFERENCES "public.attribute"("id");

--------------------------------------------------

View сборки служебных данных:
	
CREATE OR REPLACE VIEW "public.tasks" AS
  SELECT DISTINCT
	"public.movie"."title" AS "movie",
	(SELECT "public.attribute"."name" 
		FROM "public.movie_attribute" 
		LEFT JOIN "public.attribute" on "public.attribute"."id" = "public.movie_attribute"."attribute_id"
		WHERE "attribute_value_datetime" = CURRENT_DATE
		AND "public.attribute"."type_id" = 3) AS "today",
	(SELECT "public.attribute"."name" 
		FROM "public.movie_attribute" 
		LEFT JOIN "public.attribute" on "public.attribute"."id" = "public.movie_attribute"."attribute_id"
		WHERE "attribute_value_datetime" = (CURRENT_DATE + 20)
		AND "public.attribute"."type_id" = 3) AS "upcoming_in_20_days"
FROM
	"public.movie_attribute" 
LEFT JOIN
	"public.movie" on "public.movie"."id" = "public.movie_attribute"."movie_id"
LEFT JOIN
	"public.attribute" on "public.attribute"."id" = "public.movie_attribute"."attribute_id"
WHERE
	("public.movie_attribute"."attribute_value_datetime" = CURRENT_DATE 
	or "public.movie_attribute"."attribute_value_datetime" = (CURRENT_DATE + 20))
AND
	"public.attribute"."type_id" = 3;
	
	
или так, легче, но хуже выглядит :)	

	
CREATE OR REPLACE VIEW "public.tasks" AS
  SELECT 
	"public.movie"."title" AS "movie",
	CASE 
    		WHEN "public.movie_attribute"."attribute_value_datetime" = CURRENT_DATE 
    			THEN "public.attribute"."name"
    			ELSE NULL
    	END AS "today",
	CASE 
    		WHEN "public.movie_attribute"."attribute_value_datetime" = (CURRENT_DATE + 20)
		THEN "public.attribute"."name"
    			ELSE NULL
    	END AS "upcoming_in_20_days"
FROM
	"public.movie_attribute" 
LEFT JOIN
	"public.movie" on "public.movie"."id" = "public.movie_attribute"."movie_id"
LEFT JOIN
	"public.attribute" on "public.attribute"."id" = "public.movie_attribute"."attribute_id"
WHERE
	("public.movie_attribute"."attribute_value_datetime" = CURRENT_DATE 
	or "public.movie_attribute"."attribute_value_datetime" = (CURRENT_DATE + 20))
AND
	"public.attribute"."type_id" = 3;
	
	
View сборки данных для маркетинга:
	
CREATE OR REPLACE VIEW "public.promo" AS
SELECT
    "public.movie"."title" AS "movie",
    "public.attribute"."name" AS "attribute",
    CASE 
    	WHEN "public.movie_attribute"."attribute_value_text" is not null THEN "public.movie_attribute"."attribute_value_text"
    	WHEN "public.movie_attribute"."attribute_value_bool" is not null THEN CAST("public.movie_attribute"."attribute_value_bool" AS varchar)
    	WHEN "public.movie_attribute"."attribute_value_time" is not null THEN CAST("public.movie_attribute"."attribute_value_time" AS varchar)
    	WHEN "public.movie_attribute"."attribute_value_datetime" is not null THEN CAST("public.movie_attribute"."attribute_value_datetime" AS varchar)
    	WHEN "public.movie_attribute"."attribute_value_int" is not null THEN CAST("public.movie_attribute"."attribute_value_int" AS varchar)
    	WHEN "public.movie_attribute"."attribute_value_num" is not null THEN CAST("public.movie_attribute"."attribute_value_num" AS varchar)
    END AS "attribute_value"
FROM
	"public.movie_attribute" 
LEFT JOIN
	"public.movie" on "public.movie"."id" = "public.movie_attribute"."movie_id"
LEFT JOIN
	"public.attribute" on "public.attribute"."id" = "public.movie_attribute"."attribute_id"
WHERE
	"public.attribute"."type_id" = 1;


--------------------------------------------------------------------------

Тестовые данные:

INSERT INTO "public.movie" ("title","duration","description","age_limit_id") 
VALUES 
('Дюна','03:00:00','',2),
('Чебурашка','02:00:00','',1),
('Аватар 2','02:30:00','',3);


INSERT INTO "public.data_type" ("name") 
VALUES 
('text'),
('boolean'),
('time'),
('datetime'),
('integer'),
('numeric');

INSERT INTO "public.attribute_type" ("name") 
VALUES 
('promo'),
('info'),
('task');

INSERT INTO "public.attribute" ("data_type_id", "type_id", "name") 
VALUES 
(1,1,'рецензии'),
(2,1,'премия Oscar'),
(2,1,'премия «Ника»'),
(2,1,'премия Golden Globes'),
(2,1,'премия BAFTA'),
(2,1,'премия Cèsar'),
(2,1,'премия «Золотой Орел»'),
(2,1,'премия Goya'),
(2,1,'премия Emmy'),
(2,1,'Каннский кинофестиваль'),
(2,1,'Берлинский кинофестиваль'),
(2,1,'Венецианский кинофестиваль'),
(2,1,'ММКФ'),
(2,1,'«Кинотавр»'),
(4,3,'мировая премьера'),
(4,3,'премьера в РФ'),
(4,3,'начало продажи билетов'),
(4,3,'запуск рекламной кампании'),
(6,2,'рейтинг IMDb');

Режиссеров, актеров и т.п. наверное лучше хранить в качестве отдельного отношения, а не атрибутов?, хотя для кинотеатра не важно.


INSERT INTO "public.movie_attribute" (
	"movie_id", 
	"attribute_id", 
	"attribute_value_text", 
	"attribute_value_bool", 
	"attribute_value_time", 
	"attribute_value_datetime", 
	"attribute_value_int",
	"attribute_value_num"
) 
VALUES 
(1,1,'Хороший фильм!',NULL,NULL,NULL,NULL,NULL),
(1,1,'Так себе...',NULL,NULL,NULL,NULL,NULL),
(1,2,NULL,true,NULL,NULL,NULL,NULL),
(1,4,NULL,true,NULL,NULL,NULL,NULL),
(1,5,NULL,true,NULL,NULL,NULL,NULL),
(1,15,NULL,NULL,NULL,'2021-09-03 00:00:00+00',NULL,NULL),
(1,16,NULL,NULL,NULL,'2021-09-16 00:00:00+00',NULL,NULL),
(1,19,NULL,NULL,NULL,NULL,NULL,8.00),
(1,17,NULL,NULL,NULL,'2021-09-06 00:00:00+00',NULL,NULL),
(1,18,NULL,NULL,NULL,'2021-08-16 00:00:00+00',NULL,NULL);


